bob %in% c(1,2,3,4,5,6,7)
# R can handle all sorts of mathematical and logical expressions.
3+4 # Here, it will evaluate 3 + 4, but it ignores everything after the hashtag on this line
5*2 # This evaluates 5 times 2
10/3 # Can you figure out this one? ;)
bob = 3+4 # This assigns the evaluated function (3 + 4) to an object (like a variable) called "bob"
# bob should equal 7
jane <- 5*2 # This assigns the value of 5 times 2 to an object called "jane" - Either symbol works
# R can process a host of logical evaluations.  For example we can ask whether bob or jane is greater...
bob > jane # This gives us the value "FALSE" - bob is 7, jane is 10
bob < jane # This gives the value "TRUE"
bob %in% c(1,2,3,4,5,6,7)
c(1,2,3,4,5,6,7) %in% bob
bob >= jane
bob == jane
jane == 10
(jane == 10) + 1   #!???
# One way to manually enter data is with the command c()
# That stands for "concatenate" and allows you to enter a series of values to be saved to a single object:
billy = c(2,3,4,5,6) # "billy" is now a NUMERIC VECTOR of 5 values
# This works for STRINGS as well. Strings are made up of characters
suzy = c("This","is","a","character","vector") # notice how each string is enclosed in quotes. That tells R it is a string
billy[1] # The brackets [] allow you to pick one or more elements from an object.  Here, we asked for the first element
observation = c(1,2,3,4,5,6,7,8,9,10) # our vector of observations from a reeated experiment
wingspan = c(1.2,1.4,1.0,1.2,1.8,2.0,2.2,1.1,2.3,2.0) # our vector of wingspans
mass = c(0.43,0.44,0.32,0.44,0.52,0.55,0.56,0.42,0.51,0.57) # our vector of mass
cbind(observation,wingspan,mass) # this will show us our matrix, but we want to assign it to an object!
data = cbind(observation,wingspan,mass) # assigned to an object called "data"
data
data[1,3]
data[1,3] + data[2,3] + data[3,3] + data[4,3] + data[5,3]
sum(data[1,3],data[2,3],data[3,3],data[4,3],data[5,3])
data[1:5,3] # This gives you ROWS 1 through 5, and COLUMN 3 - 1:5 means "1 through 5"
sum(data[1:5,3]) # All you have to do is enclose that in the "sum" function!
data[,3] # This gives you ALL rows, but only column 3
data[3,] # This gives you ONLY row 3, but all columns
plot(x=data[,2], y=data[,3]) # the plot() function wants you to give it the vector for the x and y axes. DONE!
summary(glm(data[,3] ~ data[,2])) # this gives a summary table of a general linear model test
read.csv("Code_Examples/R_Intro/iris.csv") # this prints it directly to the screen. we want to save it to an object
# Data Frames ####
# R has quite a few built-in data sets, for learning
data("iris") # load it like this
# For built-in data, there's often a 'help file'
?iris
iris
even <- seq(2,150,2)
iris_even_row <- iris[even,]
print(iris_even_row)
iris_chr <- as.character(iris)
Sepal.Area <- dat$Sepal.Length*dat$Sepal.Width
dat <- iris # can rename the object to be easier to type if you want
Sepal.Area <- dat$Sepal.Length*dat$Sepal.Width
iris$Sepal.Area <- Sepal.Area
# 5.  Create a new dataframe that is a subset of iris using only rows where Sepal.Area is greater than 20
# (name it big_area_iris)
area_row <- iris$Sepal.Area > 20
big_area_iris <- iris[area_row,]
